% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ComputeMST.R
\name{ComputeMST}
\alias{ComputeMST}
\title{Euclidean Minimum Spanning Tree}
\usage{
ComputeMST(x, verbose = TRUE, scale = FALSE)
}
\arguments{
\item{x}{a \code{numeric matrix} or \code{data.frame}.}

\item{verbose}{If \code{TRUE}, mutes the output from the C++
code.}

\item{scale}{If \code{TRUE}, it will scale your data with 
\code{\link[base]{scale}} before computing the the minimum spanning tree 
and the distances to be presented will refer to the scaled data.}
}
\value{
an object of class \code{MST} and \code{data.frame}.
}
\description{
Computes an Euclidean Minimum Spanning Tree (EMST) from the 
    data. \code{ComputeMST} is a wrapper around the homonym function in
    the 'mlpack' library.
}
\details{
Before the computation, ComputeMST runs some checks and 
    transformations (if needed) on the provided data using the 
    \code{data_check} function. After the computation, it returns the 
    'cleaned' data plus 3 columns: \code{from}, \code{to}, and 
    \code{distance}. Those columns show each pair of start and end points, 
    and the distance between them, forming the Minimum Spanning Tree (MST).
}
\note{
It is worth noting that the afore mentioned  columns (\code{from}, 
    \code{to}, and \code{distance}) have no relationship with their 
    respective row in the output \code{MST/data.frame} object. The authors 
    chose the \code{data.frame} format for the output rather than a 
    \code{list} because it is more suitable for plotting the MST with the 
    new 'ggplot2' Stat (\code{\link[emstreeR]{stat_MST}}) provided with this 
    package. The last row of the output at these three columns will always 
    be the same: \code{1 1 0.0000000}. This is because we always have n-1 
    edges for n points. Hence, this is done to 'complete' the data.frame 
    that is returned.
}
\examples{

## artifical data
set.seed(1984)
n <- 15
c1 <- data.frame(x = rnorm(n, -0.2, sd = 0.2), y = rnorm(n, -2, sd = 0.2))
c2 <- data.frame(x = rnorm(n, -1.1, sd = 0.15), y = rnorm(n, -2, sd = 0.3)) 
d <- rbind(c1, c2)
d <- as.data.frame(d)

## MST:
out <- ComputeMST(d)
out

}
